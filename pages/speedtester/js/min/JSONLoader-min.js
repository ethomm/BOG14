THREE.JSONLoader=function(e){"boolean"==typeof e&&(console.warn("THREE.JSONLoader: showStatus parameter has been removed from constructor."),e=void 0),this.manager=void 0!==e?e:THREE.DefaultLoadingManager,this.withCredentials=!1},THREE.JSONLoader.prototype={constructor:THREE.JSONLoader,get statusDomElement(){return void 0===this._statusDomElement&&(this._statusDomElement=document.createElement("div")),console.warn("THREE.JSONLoader: .statusDomElement has been removed."),this._statusDomElement},load:function(e,r,t,s){var o=this,n=this.texturePath&&"string"==typeof this.texturePath?this.texturePath:THREE.Loader.prototype.extractUrlBase(e),i=new THREE.XHRLoader(this.manager);i.setCrossOrigin(this.crossOrigin),i.setWithCredentials(this.withCredentials),i.load(e,function(t){var s=JSON.parse(t),i=s.metadata;if(void 0!==i){if("object"===i.type)return void console.error("THREE.JSONLoader: "+e+" should be loaded with THREE.ObjectLoader instead.");if("scene"===i.type)return void console.error("THREE.JSONLoader: "+e+" should be loaded with THREE.SceneLoader instead.")}var a=o.parse(s,n);r(a.geometry,a.materials)})},setCrossOrigin:function(e){this.crossOrigin=e},setTexturePath:function(e){this.texturePath=e},parse:function(e,r){function t(r){function t(e,r){return e&1<<r}var s,o,n,a,c,h,l,m,f,u,E,d,g,v,p,T,H,R,x,w,k,C,b,V,O,y,I,L=e.faces,N=e.vertices,S=e.normals,W=e.colors,J=0;if(void 0!==e.uvs){for(s=0;s<e.uvs.length;s++)e.uvs[s].length&&J++;for(s=0;J>s;s++)i.faceVertexUvs[s]=[]}for(a=0,c=N.length;c>a;)R=new THREE.Vector3,R.x=N[a++]*r,R.y=N[a++]*r,R.z=N[a++]*r,i.vertices.push(R);for(a=0,c=L.length;c>a;)if(u=L[a++],E=t(u,0),d=t(u,1),g=t(u,3),v=t(u,4),p=t(u,5),T=t(u,6),H=t(u,7),E){if(w=new THREE.Face3,w.a=L[a],w.b=L[a+1],w.c=L[a+3],k=new THREE.Face3,k.a=L[a+1],k.b=L[a+2],k.c=L[a+3],a+=4,d&&(f=L[a++],w.materialIndex=f,k.materialIndex=f),n=i.faces.length,g)for(s=0;J>s;s++)for(V=e.uvs[s],i.faceVertexUvs[s][n]=[],i.faceVertexUvs[s][n+1]=[],o=0;4>o;o++)m=L[a++],y=V[2*m],I=V[2*m+1],O=new THREE.Vector2(y,I),2!==o&&i.faceVertexUvs[s][n].push(O),0!==o&&i.faceVertexUvs[s][n+1].push(O);if(v&&(l=3*L[a++],w.normal.set(S[l++],S[l++],S[l]),k.normal.copy(w.normal)),p)for(s=0;4>s;s++)l=3*L[a++],b=new THREE.Vector3(S[l++],S[l++],S[l]),2!==s&&w.vertexNormals.push(b),0!==s&&k.vertexNormals.push(b);if(T&&(h=L[a++],C=W[h],w.color.setHex(C),k.color.setHex(C)),H)for(s=0;4>s;s++)h=L[a++],C=W[h],2!==s&&w.vertexColors.push(new THREE.Color(C)),0!==s&&k.vertexColors.push(new THREE.Color(C));i.faces.push(w),i.faces.push(k)}else{if(x=new THREE.Face3,x.a=L[a++],x.b=L[a++],x.c=L[a++],d&&(f=L[a++],x.materialIndex=f),n=i.faces.length,g)for(s=0;J>s;s++)for(V=e.uvs[s],i.faceVertexUvs[s][n]=[],o=0;3>o;o++)m=L[a++],y=V[2*m],I=V[2*m+1],O=new THREE.Vector2(y,I),i.faceVertexUvs[s][n].push(O);if(v&&(l=3*L[a++],x.normal.set(S[l++],S[l++],S[l])),p)for(s=0;3>s;s++)l=3*L[a++],b=new THREE.Vector3(S[l++],S[l++],S[l]),x.vertexNormals.push(b);if(T&&(h=L[a++],x.color.setHex(W[h])),H)for(s=0;3>s;s++)h=L[a++],x.vertexColors.push(new THREE.Color(W[h]));i.faces.push(x)}}function s(){var r=void 0!==e.influencesPerVertex?e.influencesPerVertex:2;if(e.skinWeights)for(var t=0,s=e.skinWeights.length;s>t;t+=r){var o=e.skinWeights[t],n=r>1?e.skinWeights[t+1]:0,a=r>2?e.skinWeights[t+2]:0,c=r>3?e.skinWeights[t+3]:0;i.skinWeights.push(new THREE.Vector4(o,n,a,c))}if(e.skinIndices)for(var t=0,s=e.skinIndices.length;s>t;t+=r){var h=e.skinIndices[t],l=r>1?e.skinIndices[t+1]:0,m=r>2?e.skinIndices[t+2]:0,f=r>3?e.skinIndices[t+3]:0;i.skinIndices.push(new THREE.Vector4(h,l,m,f))}i.bones=e.bones,i.bones&&i.bones.length>0&&(i.skinWeights.length!==i.skinIndices.length||i.skinIndices.length!==i.vertices.length)&&console.warn("When skinning, number of vertices ("+i.vertices.length+"), skinIndices ("+i.skinIndices.length+"), and skinWeights ("+i.skinWeights.length+") should match.")}function o(r){if(void 0!==e.morphTargets)for(var t=0,s=e.morphTargets.length;s>t;t++){i.morphTargets[t]={},i.morphTargets[t].name=e.morphTargets[t].name,i.morphTargets[t].vertices=[];for(var o=i.morphTargets[t].vertices,n=e.morphTargets[t].vertices,a=0,c=n.length;c>a;a+=3){var h=new THREE.Vector3;h.x=n[a]*r,h.y=n[a+1]*r,h.z=n[a+2]*r,o.push(h)}}if(void 0!==e.morphColors&&e.morphColors.length>0){console.warn('THREE.JSONLoader: "morphColors" no longer supported. Using them as face colors.');for(var l=i.faces,m=e.morphColors[0].colors,t=0,s=l.length;s>t;t++)l[t].color.fromArray(m,3*t)}}function n(){var r=[],t=[];void 0!==e.animation&&t.push(e.animation),void 0!==e.animations&&(e.animations.length?t=t.concat(e.animations):t.push(e.animations));for(var s=0;s<t.length;s++){var o=THREE.AnimationClip.parseAnimation(t[s],i.bones);o&&r.push(o)}if(i.morphTargets){var n=THREE.AnimationClip.CreateClipsFromMorphTargetSequences(i.morphTargets,10);r=r.concat(n)}r.length>0&&(i.animations=r)}var i=new THREE.Geometry,a=void 0!==e.scale?1/e.scale:1;if(t(a),s(),o(a),n(),i.computeFaceNormals(),i.computeBoundingSphere(),void 0===e.materials||0===e.materials.length)return{geometry:i};var c=THREE.Loader.prototype.initMaterials(e.materials,r,this.crossOrigin);return{geometry:i,materials:c}}};